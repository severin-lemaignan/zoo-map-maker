#! /usr/bin/env python
"""
This ROS node creates an action server that waits for a goal (item, 2D target
location).

It then calls a planning service (provided by playground_map_and_plan) to find
a path for the item through the playground, and execute this plan by publishing
successive 'touches' (as ROS Poses) to be interpreted by the sandtray as 'robot
touches'. It publishes as well the trajectory as a marker array for display in
RViz.
"""
import rospy

import actionlib
import tf

from geometry_msgs.msg import PoseStamped
from visualization_msgs.msg import Marker

import freeplay_sandbox_msgs.msg
import freeplay_sandbox_msgs.srv

tl = None

PLAN_SERVICE="plan_motion"

def visualize_traj(points):

    traj = Marker()
    traj.header.frame_id = REFERENCE_FRAME
    traj.header.stamp = rospy.get_rostime()
    traj.ns = "item_motion_traj"
    traj.action = Marker.ADD
    traj.pose.orientation.w = 1.0
    traj.type = Marker.LINE_STRIP
    traj.scale.x = 0.01 # line width
    traj.color.r = 1.0
    traj.color.b = 0.0
    traj.color.a = 1.0
    
    traj.id = 0; #overwrite any existing shapes
    traj.lifetime.secs = 1; #timeout for display
    
    traj.points = list(points)
    
    pub_markers.publish(traj)

class PlaygroundTrajTrackerAction(object):
    # create messages that are used to publish feedback/result
    _feedback = freeplay_sandbox_msgs.msg.PlaygroundNavigationFeedback()
    _result = freeplay_sandbox_msgs.msg.PlaygroundNavigationResult()

    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, freeplay_sandbox_msgs.msg.PlaygroundNavigationAction, execute_cb=self.execute_cb, auto_start = False)
        self._as.start()

    def execute_cb(self, goal):
        # helper variables
        r = rospy.Rate(5)
        success = True

        # publish info to the console for the user
        rospy.loginfo('%s: Received a request to move %s to %.2f, %.2f. Let\'s do that' % (self._action_name, goal.item, goal.goal.x, goal.goal.y))

        goalRef = PoseStamped()
        goalRef.header.frame_id = REFERENCE_FRAME
        goalRef.pose.position.x = goal.goal.x
        goalRef.pose.position.y = goal.goal.y

        goalInTargetFrame =  tl.transformPose(goal.item, goalRef)
        rospy.loginfo("Moving %s to %.2f,%.2f" % (goalInTargetFrame.header.frame_id, goalInTargetFrame.pose.position.x, goalInTargetFrame.pose.position.y))

        rospy.loginfo("Requesting a plan...")
        path=None
        try:
            plan = rospy.ServiceProxy(PLAN_SERVICE, freeplay_sandbox_msgs.srv.PlaygroundPlan)
            path = plan(goalInTargetFrame).path
        except rospy.ServiceException, e:
            print "Service call failed: %s"%e
            self._as.set_aborted()
            success = False
            return


        success = self.play_traj(path)

        if success:
            rospy.loginfo('%s: Succeeded' % self._action_name)
            self._as.set_succeeded(self._result)

    def play_traj(self,requested_traj):

        written_points = []

        rospy.loginfo("Received trajectory! As requested, waiting " + str((requested_traj.header.stamp-rospy.Time.now()).to_sec()) + "s before starting...")

        #wait until time instructed to start executing
        rospy.sleep(requested_traj.header.stamp-rospy.Time.now());

        rospy.loginfo("Waiting a bit more (" + str(requested_traj.poses[0].header.stamp.to_sec()) + "s) to give the robot time to prepare...")
        #wait for robot to get to starting point
        rospy.sleep(requested_traj.poses[0].header.stamp.to_sec()); 


        rospy.loginfo("Starting to play trajectory!")

        #add points to the display one at a time, like an animation
        for i in range(len(requested_traj.poses)-1): 
            p = requested_traj.poses[i].pose.position;
            pub_poses.publish(requested_traj.poses[i])
            written_points.append(p)
            visualize_traj(written_points)
            duration = requested_traj.poses[i+1].header.stamp - requested_traj.poses[i].header.stamp;

            # check that preempt has not been requested by the client
            if self._as.is_preempt_requested():
                rospy.loginfo('%s: Preempted' % self._action_name)
                self._as.set_preempted()
                success = False
                return False
            # publish the feedback
            self._feedback.percentage = i*100./len(requested_traj.poses)
            rospy.loginfo("Done %i%%" % self._feedback.percentage)
            self._as.publish_feedback(self._feedback)

            rospy.sleep(duration); #wait until it's time to show the next point

        self._feedback.percentage = 100
        self._as.publish_feedback(self._feedback)

        #show final point (no sleep afterwards, but it may have a "lifetime" set 
        #in visualize_traj)    
        p = requested_traj.poses[len(requested_traj.poses)-1].pose.position;
        pub_poses.publish(requested_traj.poses[len(requested_traj.poses)-1])
        written_points.append(p)
        visualize_traj(written_points)

        return True


if __name__ == '__main__':
    rospy.init_node('move_playground_items')

    MARKER_TOPIC = rospy.get_param('~visualization_output_topic','visualization_markers')
    POSES_TOPIC = rospy.get_param('~poses_output_topic','poses')
    REFERENCE_FRAME = rospy.get_param('~frame_id','sandtray') 

    rospy.wait_for_service(PLAN_SERVICE)

    tl = tf.TransformListener()

    pub_markers = rospy.Publisher(MARKER_TOPIC, Marker, queue_size=5);
    pub_poses = rospy.Publisher(POSES_TOPIC, PoseStamped, queue_size=5);

    server = PlaygroundTrajTrackerAction(rospy.get_name())
    rospy.spin()
